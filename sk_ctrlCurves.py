""" Python Module for Creating Control Curves
"""

import maya.cmds as mc

class Ctrlcurve:
	def __init__(self, name = 'Ctrl_', scale = 1):
		self.trans = mc.createNode('transform', name = name)
		self.scale = scale
		mc.createNode('nurbsCurve', n = (name + 'Shape'), p = self.trans)
		mc.select(self.trans, r = True)
	
	#This will group the control
	def grpTrans(self, name=None):
		if not name:
			getName = self.trans.split('_')
			name = 'Grp_%s' % getName[1]
		grp = mc.group(self.trans , n=name)
		return grp
	
	#This will unlock the rotation order
	def rotorder(self):
		mc.setAttr((self.trans + '.ro') , k = False ,  cb = True)
		mc.select(self.trans, r = True)
	
	#Create Square 
	def square(self):
		mc.setAttr((self.trans + '.cc'), 1, 4, 0, False, 3, (0,1,2,3,4), 5, 5, (-1,0,-1),  (1,0,-1),  (1,0,1),  (-1,0,1),  (-1,0,-1),   type = 'nurbsCurve')
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.select(self.trans, r = True)
		return self.trans

	#Create Rectangle
	def rect(self):
		mc.setAttr((self.trans + '.sx'), 1.33)
		mc.makeIdentity (self.trans, apply = True)
		mc.select(self.trans, r = True)
		return self.trans

	#This will double the Shapes
	def doubleshape(self,scale = 1.1):
		skShp1 = mc.listRelatives(self.trans, s = True)
		skDup = mc.duplicate(self.trans, rr = True)
		mc.setAttr((skDup[0] + '.scale'), scale, scale, scale)
		mc.makeIdentity(skDup[0], apply = True)
		skShp2 = mc.listRelatives(skDup[0], s = True)
		mc.parent(skShp2[0], self.trans, r = True, s = True)
		mc.delete(skDup[0])
		mc.select(self.trans, r = True)

	#Box Control
	def box(self, piv = 0):
		mc.setAttr((self.trans + '.cc'),1,16,0,False,3,(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16),17,17,(-1,-1,1),(-1,1,1),(1,1,1),(1,-1,1),(-1,-1,1),(-1,-1,-1),(1,-1,-1),(1,-1,1),(1,1,1),(1,1,-1),(1,-1,-1),(	-1,-1,-1),(-1,1,-1),(	1,1,-1),(1,1,1),(-1,1,1),(-1,1,-1),type = 'nurbsCurve')
		if piv == 1:
			mc.move(0, -1, 0, (self.trans + '.scalePivot'), (self.trans + '.rotatePivot'), r = True)
			mc.setAttr((self.trans + '.ty'), 1)
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.select(self.trans, r = True)
		return self.trans

	#IkFk Control
	def ikfk(self, limb = 'Arm'):
		mc.setAttr((self.trans + '.cc'), 1, 12, 0, False, 3, (0,1,2,3,4,5,6,7,8,9,10,11,12), 13, 13, (-1,-0.3,0),(-1,0.3,0),(-0.3,0.3,0),(-0.3,1.0,0),(0.3,1.0,0),(0.3,0.3,0),(1,0.3,0),(1,-0.3,0),(0.3,-0.3,0),(0.3,-1.0,0),(-0.3,-1.0,0),(-0.3,-0.3,0),(-1,-0.3,0), type = 'nurbsCurve')
		skShp1 = mc.listRelatives(self.trans, s = True)
		skDup = mc.duplicate(self.trans, rr = True)
		mc.setAttr((skDup[0] + '.rx'), 90)
		mc.makeIdentity(skDup[0], apply = True)
		skShp2 = mc.listRelatives(skDup[0], s = True)
		mc.parent(skShp2[0], self.trans, r = True, s = True)
		mc.delete(skDup[0])
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.addAttr(self.trans, ln ='IKFK', min=0, max=1, at = 'long', dv = 0, k = True)
		mc.addAttr(self.trans, ln =(limb + 'Mode'), min=0, max=1, en = 'IK:FK:', at = 'enum', dv = 0, k = False)
		mc.connectAttr((self.trans + '.IKFK'), (self.trans + '.%sMode' % limb))
		mc.setAttr((self.trans + '.%sMode' % limb), cb = True, lock = True)
		mc.addAttr(self.trans, ln ='IKFKControls', at = 'bool', k = False)
		mc.setAttr((self.trans + '.IKFKControls'), cb = True)
		mc.select(self.trans, r = True)
		return self.trans

	#FkSpine Control
	def fkSpine(self):
		mc.setAttr((self.trans + '.cc') ,3,20,0,False,3,(0, 0, 0, 0.063, 0.126, 0.191, 0.254, 0.306, 0.346, 0.364, 0.372, 0.408, 0.572, 0.736, 0.864, 0.876, 0.899, 0.943, 0.993, 1.051, 1.108, 1.1650,1.217, 1.217, 1.217),25,23,(0, 0 ,0.242), (0 , -0.046 , 0.254), (0 , -0.054 , 0.315), (0 , -0.018 , 0.352), (0 , 0.030 , 0.350), (0 , 0.059 , 0.317), (0 , 0.059 , 0.274), (0 , 0.035 , 0.248), (0 , 0 , 0.242), (0 , 0 , 0.242), (0 , 0 , 0.242), (0 , 0 , 0.141), (0 , 0 , -0.243), (0 , 0 , -0.243), (0 , 0 , -0.243), (0 , 0.034 , -0.248),  (0 , 0.057 , -0.273), (0 , 0.061 , -0.317), (0 , 0.023 , -0.356), (0 , -0.026 , -0.347), (0 , -0.061 , -0.304), (0 , -0.033 , -0.247), (0 , 0.0019 , -0.243),type = 'nurbsCurve')
		skDup = mc.duplicate(self.trans, rr = True)
		mc.setAttr((skDup[0] + '.rz'), 90)
		mc.makeIdentity(skDup[0], apply = True)
		skShp2 = mc.listRelatives(skDup[0], s = True)
		mc.parent(skShp2[0], self.trans, r = True, s = True)
		mc.delete(skDup[0])
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.select(self.trans, r = True)
		return self.trans

	#Foot Control
	def foot(self, side = 'Left'):
		mc.setAttr((self.trans + '.cc'), 3, 11, 0, False, 3, (0,0,0,1,2,3,4,5,6,7,8,9,10,11,11,11), 16, 14, (-0.13,0,0),(0.14,0,0),(0.14,0,0),(0.14,0,0),(0.23,0,0.29),(0.29,0,0.59),(0.27,0,0.78),(0.18,0,0.88),(0,0,0.97),(-0.14,0,0.96),(-0.14,0,0.96),(-0.26,0,0.71),(-0.14,0,0.31),(-0.13,0,-0), type = 'nurbsCurve')
		if side == 'Right':
			mc.setAttr((self.trans + '.sx'), -1)
			mc.makeIdentity (self.trans, apply = True)
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.select(self.trans, r = True)
		return self.trans

	#Hand Control
	def hand(self, side = 0):
		mc.setAttr((self.trans + '.cc'), 3, 9, 0, False, 3, (0,0,0,1,2,3,4,5,6,7,8,9,9,9), 14, 12, (0,0,-0.22),(0,0,0.22),(0,0,0.22),(0,0,0.22),(0.24,0,0.22),(0.43,0,0.22),(0.62,0,0.17),(0.77,0,0.01),(0.62,0,-0.17),(0.41,0,-0.21),(0.25,0,-0.22),(0,0,-0.22), type = 'nurbsCurve')
		if side == 1:
			mc.setAttr((self.trans + '.sx'), -1)
			mc.makeIdentity (self.trans, apply = True)
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.addAttr(self.trans, ln = 'FingerControl', at = 'bool', min = 0, max = 1)
		mc.setAttr((self.trans + '.FingerControl'), k = False, cb = True)
		mc.select(self.trans, r = True)
		return self.trans

	#Head Control
	def head(self):
		mc.setAttr((self.trans + '.cc'), 3, 28, 0, False, 3, (0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10), 33, 31, (0.82,-0.18,-0.1),(0.34,-0.18,-0.59),(-0.34,-0.18,-0.59),(-0.82,-0.18,-0.1),(-0.82,-0.24,-0.1),(-0.82,-0.29,-0.1),(-0.82,-0.35,-0.1),(-0.82,-0.24,0.13),(-0.80,-0.12,0.36),(-0.80,0,0.59),(-0.81,0.12,0.36),(-0.82,0.24,0.13),(-0.82,0.35,-0.1),(-0.82,0.29,-0.1),(-0.82,0.24,-0.1),(-0.82,0.18,-0.1),(-0.34,0.18,-0.59),(0.34,0.18,-0.59),(0.82,0.18,-0.1),(0.82,0.24,-0.1),(0.82,0.29,-0.1),(0.82,0.35,-0.1),(0.82,0.24,0.13),(0.80,0.12,0.36),(0.80,0,0.59),(0.80,-0.12,0.36),(0.82,-0.24,0.13),(0.82,-0.35,-0.1),(0.82,-0.29,-0.1),(0.82,-0.24,-0.1),(0.82,-0.18,-0.1), type = 'nurbsCurve')
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.addAttr(self.trans, ln = 'AutoStretch', at = 'long', min = 0, max = 1)
		mc.setAttr((self.trans + '.AutoStretch'), k = True)
		mc.select(self.trans, r = True)
		return self.trans

	#Jaw Control
	def jaw(self):
		mc.setAttr((self.trans + '.cc'),3, 29, 0,False, 3,(0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,29,29),34,32,(0.12524554153732481,0.068597149791714884,-0.081862545923651719),(0,0.068597149791714898,0),(-0.15045497412596376,0.068597149791714926,-0.036336500965636898),(-0.15045497412596376,0.068597149791714926,-0.036336500965636898),(-0.15045497412596376,0.068597149791714926,-0.036336500965636898),(-0.15123318050675927,0.17887504359711975,-0.036481478432750958),(-0.15123318050675927,0.17887504359711975,-0.036481478432750958),(-0.15123318050675927,0.17887504359711975,-0.036481478432750958),(-0.15123318050675927,0.17887504359711975,-0.036481478432750958),(-0.35540076968682222,1.2260404335093965e-016,-0.12407668652401282),(-0.35540076968682222,1.2260404335093965e-016,-0.12407668652401282),(-0.35540076968682222,1.2260404335093965e-016,-0.12407668652401282),(-0.15123318050675927,-0.17887504359711945,-0.036481478432750958),(-0.15123318050675927,-0.17887504359711945,-0.036481478432750958),(-0.15123318050675927,-0.17887504359711945,-0.036481478432750958),(-0.15045497412596376,-0.068597149791714829,-0.036336500965636898),(-0.15045497412596376,-0.068597149791714829,-0.036336500965636898),(-0.15045497412596376,-0.068597149791714829,-0.036336500965636898),(0,-0.06859714979171487,0),(0.12524554153732481,-0.06859714979171487,-0.081862545923651719),(0.12524554153732481,-0.06859714979171487,-0.081862545923651719),(0.12524554153732481,-0.06859714979171487,-0.081862545923651719),(0.1250392931743054,-0.1788750435971195,-0.08171765443628054),(0.1250392931743054,-0.1788750435971195,-0.08171765443628054),(0.1250392931743054,-0.1788750435971195,-0.08171765443628054),(0.27178646692384412,-1.6659498816297892e-017,-0.26045507794976741),(0.27178646692384412,-1.6659498816297892e-017,-0.26045507794976741),(0.27178646692384412,-1.6659498816297892e-017,-0.26045507794976741),(0.1250392931743054,0.1788750435971197,-0.08171765443628054),(0.1250392931743054,0.1788750435971197,-0.08171765443628054),(0.1250392931743054,0.1788750435971197,-0.08171765443628054),(0.12524554153732481,0.068597149791714884,-0.081862545923651719), type = 'nurbsCurve')
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.select(self.trans, r = True)
		return self.trans

	#Flower control
	def flower(self):
		mc.setAttr((self.trans + '.cc'),	1, 34, 2,False, 3 ,(0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8),35,35,(-0.98487220952892374, -0.019437772945090179, -4.3737112133298505e-016),(-0.77915057205855098, -0.15874431708267212, -3.4601236189970618e-016),(-0.90549965550899247, -0.37904487747975518, -4.0212262653449237e-016),(-0.66414223279881923, -0.43088104788583581, -2.9493839939168397e-016),(-0.70787741966456974, -0.68681739352271931, -3.1436072396953995e-016),(-0.46166035597882638, -0.65280148860810905, -2.0501838270573564e-016),(-0.41792358719869593, -0.90063843261904242, -1.8559535561677262e-016),(-0.19114350550085235, -0.77105117043260063, -8.4884768325844618e-017),(-0.063174541725220565, -0.98487220952892351, -2.8055132317393012e-017),	(0.10205008761540138, -0.79534779339607098, 4.531934277425326e-017),(0.29643256280944391, -0.94761496204955309, 1.31642502591875e-016),(0.37580511682937523, -0.70463607709980969, 1.6689099739036771e-016),(0.62526352307987865, -0.77753069173336076, 2.776727839126097e-016),(0.60420507885240837, -0.52645240515766734, 2.6832095605496081e-016),(0.86176288672886203, -0.49891443962943688, 3.8269959944552935e-016),(0.75647224750589059, -0.27537411858197364, 3.3594116266839195e-016),(0.98487220952892374, -0.15550613834667207, 4.3737112133298505e-016),(0.805067075347211, 0.021059235184660265, 3.5752160136724376e-016),(0.97839268822816372, 0.20410254810237283, 4.3449363583832389e-016),(0.74513308522956034, 0.30777330700015409, 3.3090556305273482e-016),(0.83260504087544152, 0.54265279032394764, 3.6975091471955391e-016),(0.58476651495012799, 0.55399195260027767, 2.5968849957097717e-016),(0.58476651495012799, 0.80830841791197106, 2.5968849957097717e-016),(0.34664885289033492, 0.7256961032416599, 1.5394301517549943e-016),(0.25107749561850351, 0.96219546689064339, 1.1150080664035378e-016),(0.059933199160460734, 0.80506865726159116, 2.6615687058955444e-017),(-0.10691131050535142, 0.98487220952892351, -4.7478159406356212e-017),(-0.22840075298022328, 0.77105275234698101, -1.0143030992014669e-016),(-0.4568007150032562, 0.87472351124476211, -2.0286026858473969e-016),(-0.4908166199178669, 0.63336450662020893, -2.1796636492060402e-016),(-0.74351478681875049, 0.65118319019729931, -3.3018689419017666e-016),(-0.68195933446152934, 0.40334466427198551, -3.0285078199089514e-016),(-0.92979786038684265, 0.33531127252838477, -4.1291319713947179e-016),(-0.78401021303412066, 0.12796975473282196, -3.4817047602070191e-016),(-0.98487220952892374, -0.019437772945090179, -4.3737112133298505e-016), type = 'nurbsCurve')
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.select(self.trans, r = True)
		return self.trans

	def sphere(self):
		mc.setAttr((self.trans+'.cc'),3,52,0,False,3,(0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,52,52),57,55,(1,0,0),(0.92400000000000004,0,0.38300000000000001),(0.70699999999999996,0,0.70699999999999996),(0.38300000000000001,0,0.92400000000000004),(0,0,1),(-0.38300000000000001,0,0.92400000000000004),(-0.70699999999999996,0,0.70699999999999996),(-0.92400000000000004,0,0.38300000000000001),(-1,0,0),(-0.92400000000000004,0,-0.38300000000000001),(-0.70699999999999996,0,-0.70699999999999996),(-0.38300000000000001,0,-0.92400000000000004),(0,0,-1),(0,0,-1),(0,0,-1),(0,0.38300000000000001,-0.92400000000000004),(0,0.70699999999999996,-0.70699999999999996),(0,0.92400000000000004,-0.38300000000000001),(0,1,0),(0,0.92400000000000004,0.38300000000000001),(0,0.70699999999999996,0.70699999999999996),(0,0.38300000000000001,0.92400000000000004),(0,0,1),(0,-0.38300000000000001,0.92400000000000004),(0,-0.70699999999999996,0.70699999999999996),(0,-0.92400000000000004,0.38300000000000001),(0,-1,0),(0,-0.92400000000000004,-0.38300000000000001),(0,-0.70699999999999996,-0.70699999999999996),(0,-0.38300000000000001,-0.92400000000000004),(0,0,-1),(0,0,-1),(0,0,-1),(0.38300000000000001,0,-0.92400000000000004),(0.70699999999999996,0,-0.70699999999999996),(0.92400000000000004,0,-0.38300000000000001),(1,0,0),(1,0,0),(1,0,0),(0.92400000000000004,0.38300000000000001,0),(0.70699999999999996,0.70699999999999996,0),(0.38300000000000001,0.92400000000000004,0),(0,1,0),(-0.38300000000000001,0.92400000000000004,0),(-0.70699999999999996,0.70699999999999996,0),(-0.92400000000000004,0.38300000000000001,0),(-1,0,0),(-0.92400000000000004,-0.38300000000000001,0),(-0.70699999999999996,-0.70699999999999996,0),(-0.38300000000000001,-0.92400000000000004,0),(0,-1,0),(0.38300000000000001,-0.92400000000000004,0),(0.70699999999999996,-0.70699999999999996,0),(0.92400000000000004,-0.38300000000000001,0),(1,0,0),type='nurbsCurve')
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity (self.trans, apply = True)
		mc.select(self.trans, r = True)
		return self.trans

#Circle Control
class Ctrlcircle(Ctrlcurve):
	def __init__(self, name = 'Ctrl_', scale = 1, axis = (0,1,0)):
		self.circ = mc.circle(name = name, c = (0,0,0), nr = axis, sw = 360, r = scale, ch = 0)
		self.trans = self.circ[0]
		self.scale = scale
		mc.select(self.trans, r = True)
	#Squared the circle control
	def circsquare(self):
		skClus = mc.cluster((self.trans + '.cv[1]'), (self.trans + '.cv[3]'), (self.trans + '.cv[5]'), (self.trans + '.cv[7]'))
		mc.setAttr((skClus[1] + '.scale'), 0.707, 0.707, 0.707)
		mc.delete(self.trans, ch = True)
		mc.setAttr((self.trans + '.scale'), self.scale, self.scale, self.scale)
		mc.makeIdentity(self.trans, apply = True)
		mc.select(self.trans, r = True)

#**************************************************END**************************************************#
